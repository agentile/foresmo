Here are some notes on how to use Solar_Sql_Select, which is for building simple to moderately complex SELECT statements.


--------------------
Example Statement Building
--------------------

Let's build this native SQL statement as a Solar_Sql_Select command set.

{{code: sql
    SELECT id, date, type, name
    FROM example
    WHERE
        date >= '2005-01-01' AND
        date <= '2005-01-31' AND
        type IN('a','b','c')
}}

There are a number of ways to do this, depending on your logic flow.  You will always need a Solar_Sql_Select object, of course.

{{code: php
    $select = Solar::object('Solar_Sql_Select');
}}

Now let's pick some columns from a table:
    
{{code: php
    // comma-separated string of columns ...
    $select->from('example', 'id, date, type, name');

    // ... or an array of columns
    $cols = array('id', 'date', 'type', 'name');
    $select->from('example', $cols);
}}
    
Add some WHERE conditions (these are ANDed together by default, you can also use the orWhere() method for ORed conditions):
    
{{code: php
    // quote the value and overwrite "?" placeholders
    $select->where("date >= ?",  '2005-01-01');
    $select->where("date <= ?",  '2005-01-31');
    $select->where("type IN(?)", array('a', 'b', 'c'));
}}


--------------------
Binding Data Into a Select
--------------------

Although the where() method above with its in-place quoting is useful in some situations, others may call for binding data all-at-once wityh named parameters (instead of one-by-one).  You can do so like this:
    
{{code: php
    // set up the conditions with named placeholders
    $select->where("date >= :begin");
    $select->where("date <= :end");
    $select->where("type IN(:list)");

    // bind the data into the placeholders all at once...
    $data = array(
        'begin' => '2005-01-01',
        'end'   => '2005-01-31',
        'list'  => array('a', 'b', 'c')
    );
    $select->bind($data);

    // or bind to placeholders one-by-one
    $select->bind('begin', '2005-01-01');
    $select->bind('end',   '2005-01-31');
    $select->bind('list',  array('a', 'b', 'c'));
}}


--------------------
Fetching Results
--------------------

That puts together the SELECT statement for us.  Now let's fetch the results:
    
{{code: php
    // fetch a Solar_Sql_Result
    $return_as = 'result';
    $result = $select->fetch($return_as);

    // fetch an array of all rows
    $return_as = 'all';
    $result = $select->fetch($return_as);

    // fetch only the first column
    $return_as = 'col';
    $result = $select->fetch($return_as);

    // fetch only the first row
    $return_as = 'row';
    $result = $select->fetch($return_as);
}}
    
The $return_as parameter can be any return type allowed by Solar_Sql::select() method:

: all : return all rows as a sequential array (the row arrays are keyed on the column name)
: assoc : return all rows keyed on the first column value (the row arrays are keyed on the column name)
: col : return the first column of values as a sequntial array
: one : return the first column of the first row
: pair | pairs : return the first two columns as an array of key-value pairs
: pdo | pdostatement : return the native PDOStatment object resulting from the query
: result : return a Solar_Sql_Result object for the query
: row : return the first row as an array keyed on the column names
: Any_Class_Name : return an instance of this class with a PDOStatment object configured into it


--------------------
Specifying Limits
--------------------

You can limit by count-and-offset, or by page.

Limit by Count and Offset
====================

You can set limits on the query, either by count and offset, or by page number.

To set a count-and-offset limit, use the limit() method:
    
{{code: php
    // get a count of 10 rows starting offset from row 50
    $select->limit(10, 50);
}}

Limit by Page Number
====================

To set the number of rows per page, use the paging() method:

{{code: php
    // set 10 rows per page
    $select->paging(10);
}}

Then, to get a specific page of results, use the limitPage() method:

{{code: php
    // get page 5 of the results
    $select->limitPage(5);
}}


--------------------
Getting Row and Page Counts
--------------------

If you want to see the count of how many rows a SELECT statement would return, along with a count of how many pages that would be, use the countPages() method instead of fetch().

{{code: php
    // fetch page 5 of the results
    $select->limitPage(5);
    $result = $select->fetch();

    // how many rows and pages are the in the entire query?
    $total = $select->countPages();
    // $total = array('count' => number of rows, 'pages' => number of pages)
}}


--------------------
Joins
--------------------

To join tables with a simple JOIN clause, use the join() method; you can also specify which columns from the joined table you want returned.

{{code: php
    /*
    SELECT
        users.id, users.name, contacts.email, contacts.phone
    FROM users
    JOIN contacts ON contacts.user_id = users.id
    WHERE users.id = 1
    */

    $select = Solar::object('Solar_Sql_Select');
    $select->from('users', 'id, name');
    $select->join(
        'contacts', // table to join to
        'contacts.user_id = users.id', // join on this condition
        'email, phone' // columns from the joined table
    );
    $select->where('users.id = ?', 1);
}}
    
When joining tables, the column names are automatically deconflicted for you with AS aliases.  This deconfliction can be very useful when working with multiple tables, and allows you to select columns with the same name from different tables.

If you ask for a Solar_Sql_Result when you fetch the results, the deconflicted columns will be arranged into arrays for you, so you can tell which columns came from which table. 
    
{{code: php
    // get a Solar_Sql_Result object from the SELECT statement
    $result = $select->fetch('result');

    // get the first row of the result
    $row = $result->fetch();

    /*
    $row = array(
        'users' => array(
            'id' => 1,
            'name' => 'Jones'
        ),
        'contacts' => array(
            'email' => 'nobody@nowhere.com',
            'phone' => '123-456-7890'
        )
    );
    */
}}

When not using a Solar_Sql_Result, the deconflicted (aliased) column names will reflect what table the column is from, but only if columns are selected from more than one table:

{{code: php
    $row = $select->fetch('row');
    /*
    $row = array(
        'users__id'       => 1,
        'users__name'     => 'Jones'
        'contacts__email' => 'nobody@nowhere.com',
        'contacts__phone' => '123-456-7890'
    );
    */
}}
    
At this time, no additional JOIN types are supported (e.g., "LEFT JOIN", "RIGHT JOIN", etc).  This is because I am not fully educated on what JOIN types are available to, and therefore portable across, all the RDBMSes supported by PDO.

